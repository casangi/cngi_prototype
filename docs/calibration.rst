Calibration
====================

The initial demonstration of calibration in CNGI/ngCASA is centered around a streamlined implementation of self-calibration for synthesis visibility data.   The purpose of the prototype implementation of self-cal is to demonstrate the use and throughput of the dask-based parallelization framework in the calibration context, and begin to explore how some essential components of general synthesis calibration (gain solving, application) might appear in python, and built upon the xarray visibility data structures.  As such, this prototype is limited in several ways compared to the more conventional approach implemented in traditional CASA.   In fact, there is no direct single-execution analog of ngCASA selfcal available within CASA, where self-calibration involves a sequence of executions of gaincal and applycal (and includes multiple passes through the data).  In contrast, ngCASA selfcal is a single-pass implementation that takes an input data group (visibilities, weights, flags, and model), performs an antenna-based gain solution (at the native time granularity of the data), applies the result to the input data, and returns a calibrated output data group.   Most notably, there is no way to examine the solve-for gain solutions themselves.  This is mainly a practical consequence of not yet having designed the calibration solution container (caltable), nor the mechanisms for filling and examining it.   Rather, the data product (for now), are the corrected visibilities, appropriate for comparison with the input visibilities and imaging.   More comprehensive tools for generating, managing, and examining calibration will be designed and implemented in ngCASA in future.  Nonetheless, it is thought that the single-pass implementation demonstrated here will have a role in the processing of data from the larger arrays of the future (ngVLA, etc.) since self-calibration is likely the most I/O- and computationally-intensive calibration use-case, insofar as it must process the (usually) most-voluminous science target visibilities in any synthesis visibility dataset.   Thus, this demonstration is well-tuned to the specific question of applicability of the CNGI/ngCASA framework to the calibration domain.


.. toctree::
   :maxdepth: 1

   calibration/self_calibration_solve
